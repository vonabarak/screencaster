#!/usr/bin/env python

import base64
import sys, os
from datetime import datetime
from subprocess import getoutput, Popen
from pathlib import Path
from PySide6.QtGui import QIcon, QPixmap, QAction, QGuiApplication, QScreen
from PySide6.QtWidgets import QApplication, QSystemTrayIcon, QMenu
from typing import Optional


class Screencaster:
    def __init__(self, resolution="1920x1080", offset="0,0", display=None):
        self.display = display if display is not None else self._get_display()
        self.resolution = resolution
        self.offset = offset
        self.process = None
        self.filename = None

    def start(self):
        self._new_filename()
        logfile = self.filename.with_suffix(".log")
        command = self._get_command()
        print(f"command={command}\nlogfile={logfile}")
        with open(logfile, "w") as outfh:
            self.process = Popen(command, shell=True, stdout=outfh, stderr=outfh)

    def stop(self):
        self.process.terminate()
        self.process.wait()
        self.process = None

    def recording(self):
        if self.process is not None:
            return self.process.poll() is None
        return False

    def _new_filename(self):
        self.filename = self._get_dir() / f"screencast-{datetime.now().isoformat()}.mp4"

    @staticmethod
    def _get_dir():
        directory = getoutput("xdg-user-dir VIDEOS") or "/tmp"
        return Path(directory)

    def _get_display(self):
        return os.environ.get("DISPLAY", ":0")

    def _get_command(self):
        return (
            f"/usr/bin/ffmpeg "
            f"-f pulse -i default -c:a aac "
            f"-f x11grab -video_size {self.resolution} "
            f"-i {self.display}+{self.offset} "
            f"-c:v h264 "
            f"{self.filename}"
        )


class Application:
    def __init__(self):
        self.app = QApplication(sys.argv)
        screens = QGuiApplication.screens()
        self.screencaster = Screencaster(*self._params_from_qscreen(screens[0]))
        self.app.setQuitOnLastWindowClosed(False)

        self.tray = QSystemTrayIcon()
        pixmap = QPixmap()
        icon = ICON_W if self._is_dark_theme() else ICON_B
        pixmap.loadFromData(base64.b64decode(icon), "PNG")
        icon = QIcon(pixmap)
        self.tray.setIcon(icon)
        self.tray.setToolTip("Screencaster")
        self.tray.setVisible(True)
        self.tray.activated.connect(self.start_stop)

        menu = QMenu()

        if len(screens) > 1:
            opts = {}
            for i, screen in enumerate(screens):
                opts[i] = QAction(f"Start on screen {screen.name()}")
                opts[i].triggered.connect(
                    lambda checked=False, arg=screen: self.start(arg))
                menu.addAction(opts[i])
        else:
            option_start = QAction("Start")
            option_start.triggered.connect(self.start)
            menu.addAction(option_start)

        option_stop = QAction("Stop")
        option_stop.triggered.connect(self.stop)
        menu.addAction(option_stop)
        option_quit = QAction("Quit")
        option_quit.triggered.connect(self.app.quit)
        menu.addAction(option_quit)
        self.tray.setContextMenu(menu)

        sys.exit(self.app.exec())

    def start_stop(self, *_args, **_kwargs):
        if self.screencaster.recording():
            self.stop()
        else:
            self.start()

    def start(self, screen: Optional[QScreen] = None):
        if not self.screencaster.recording():
            screen_name = ""
            if screen is not None:
                self.screencaster = Screencaster(*self._params_from_qscreen(screen))
                screen_name = f" on {screen.name()}"
            self.screencaster.start()
            self.tray.showMessage(
                f"I am watching at you{screen_name}...",
                str(self.screencaster.filename))
        else:
            self.tray.showMessage(
                "Already watching.", str(self.screencaster.filename))

    def stop(self):
        if self.screencaster.recording():
            self.screencaster.stop()
            self.tray.showMessage(
                "No more watching.", str(self.screencaster.filename))
        else:
            self.tray.showMessage("Not watching.", "Nuff said")

    def _is_dark_theme(self) -> bool:
        window_bg_color = self.app.palette().window().color()
        luminance = (0.299 * window_bg_color.red()
                     + 0.587 * window_bg_color.green()
                     + 0.114 * window_bg_color.blue())
        return luminance < 128

    @staticmethod
    def _params_from_qscreen(screen: QScreen):
        geom = screen.geometry()
        return f"{geom.width()}x{geom.height()}", f"{geom.x()},{geom.y()}"


ICON_B = (
    b"iVBORw0KGgoAAAANSUhEUgAAACgAAAAoCAYAAACM/rhtAAABhWlDQ1BJQ0MgcHJvZmlsZQAAKJF9"
    b"kT1Iw0AcxV9TpSIVBwuKCGaoThZERQUXrUIRKoRaoVUHk+snNGlIUlwcBdeCgx+LVQcXZ10dXAVB"
    b"8APE0clJ0UVK/F9SaBHjwXE/3t173L0DhFqJqWbbKKBqlpGIRcVUelUMvCKAQfRiBlMyM/U5SYrD"
    b"c3zdw8fXuwjP8j735+jKZE0G+ETiWaYbFvEG8eSmpXPeJw6xgpwhPiceMeiCxI9cV1x+45x3WOCZ"
    b"ISOZmCcOEYv5FlZamBUMlXiCOJxRNcoXUi5nOG9xVksV1rgnf2Ewq60sc53mAGJYxBIkiFBQQREl"
    b"WIjQqpFiIkH7UQ9/v+OXyKWQqwhGjgWUoUJ2/OB/8LtbMzc+5iYFo0D7i21/DAGBXaBete3vY9uu"
    b"nwD+Z+BKa/rLNWD6k/RqUwsfAd3bwMV1U1P2gMsdoO9Jlw3Zkfw0hVwOeD+jb0oDPbdA55rbW2Mf"
    b"pw9AkrqK3wAHh8BwnrLXPd7d0drbv2ca/f0AJHNy7uHNADIAAAAGYktHRAD/AP8A/6C9p5MAAAAJ"
    b"cEhZcwAADsMAAA7DAcdvqGQAAAAHdElNRQfmCAEABhjBM0FLAAAFzElEQVRYw+WYaWwVVRTHf2Vr"
    b"oQVaKEoQEBQBEUEpioJgWYQoBhVEIomBuCUkIkZciBJFBf1gMEJCjMS4IApI4oZBcWUTFVo2RQum"
    b"VtmEtIiFli5A8cvvmckwr29awydPMpl58+7ce+45//M/51z4n0grIAdIa+T3TYAhQItzpeClwF0u"
    b"FCVp9bzLAd4EjgH9w4OaBp7vdYHRwPYGKDcQaAcsANYBU4AKle4NXFfPfKOAtc7RCvjTOSIlGzgI"
    b"VAKHganuLizNgK7ABKAN8BmwAagBzgAngN+BH/39DNAPaK7VsjTMY8BpYCuQCzwBvJTK9N+5o63A"
    b"PSrwKvAJcMQxj7jYc0CVC6aSGmAxsB/oDHQExgAvAnMd8xrwh/MmlWXA2BBwlwI7gEnATHd9ppHX"
    b"Wi1b5NwAmVp0EzAu1U5HAF+H3mUAk4GjTvJhI5XbpgU364HOwNOucSFwALggDuj3AF1C73KBu8Xm"
    b"EeDjBir3F/CTwTJKXL4O5InPq4EtxsFZ/BOWt4BZgcDp4L0JMA8odNKdLh5HWhjRh51/om691Xl6"
    b"Aye9zorIKBz+DKwEioEbfd8RGAqUAFeocF2IqpJJpvfR3tsD1WISYBDwS5SCUdIa2AWUq8gC4BWV"
    b"rQJOedUlcWdhTLdXANcAPcXn9LjE29zwT0zUT9fEjd51McedNKIXA8eBm5PlwLCclHxPA6Xio7ye"
    b"NBaWfYHnsgAPVkfAqy/wm3OXxlUQibrQ6M0DOgX+OwPU+rw/4tttgedC70f1TJRMNfMcbmgBMEOs"
    b"1Ua4p1Lr1EW49HrvxcCXPn8fAxZtG2JBnPTbiJ3XmdhPyIkV5vCEbPK+xsWXGKUVYi1Kjnk1SMEH"
    b"pZawnAD2+lzuws8DhwIY/srNFTn+KPCRG4uSygZw6r/ygC6OcskOsXknsBroLiXN9NsBvssUCiM0"
    b"xpSIueqiqpg4MliXROEvPzCum6krmUfygctUfjLwZMR8YxpbKe+PULDIBecD64FngUuSZCW0TgEw"
    b"zGB4IWK+pJIqTZUBt4Xe7VShAvltNJAun5VH4LgsQD/5kvMNgTH31adkKvJdEojKhPSy8qiWghZa"
    b"AY2PKIBHiM0iC90PxG1CFlm+/SfpZIQGU9R8F1sOzDGSCwJFAQGC3iTuZjgmMc+ieqK63m4rSkYC"
    b"K6xCErJUS6bZk+SrdIn/51lXrra3mWVhWgK8Y7ZKKU1jKlhiv5Lt7kvt5HLlvHVWQA+bPbCnWS4P"
    b"Vkrcewy8CnHcxTmqxHOjFcy2gTpk1iiRguYCGwNV0Awti+V7po0QYnGx4y53g8UWJUOltVMBwk+p"
    b"4DitcLu7PAb0cIG2Nj1ZwBeOrwWusr4bZF+8OVAEzLHvxRZgjzDoALxrYTEAuMNM9XcyBUcC06SF"
    b"BM76Wxr9qit7mKunasldZoQ1VuKT7D/eBlq60T7AKsv/vQbfceBTLZ8oGr6xis8BDoSDpJ1d/mbd"
    b"0N1IXGWADPLj9fJjlScHB1Vun5teCDyltYcJkRXibIN8OUR8nme5n+XzTn8PBXaHLVjlh+3F2Vpd"
    b"0VXL5tnE97QYyJYuWmvdK93gPsm7RovsljdXi7U0oZFtW1ushz4Xu31tfyvD7p0GnB9yfQbwqBjq"
    b"ZSc2HHjIHc8To4kqOVN+SzcRNDFzXAs87riJRnGipU3k4umuPcRWI5ZMV6mBTvayFpzg/+/FmGOA"
    b"C94vbNoCt7iJMCfPEbejgPRUqW6s0ZRhFpit5fIMgk4xT8KKgYuANwysck8SBodaCTybqVHh3FQK"
    b"Vgve94GbtFa2xxaJRbfEULBctzcBfrARKxDbbUJjT8sIG4GaVArmCNZaXbPdKF4W2HVlA05Rmxlc"
    b"1wdOMcYnGV8FlKVSsI8RmCO5VlmhJLq5Ugk5jtQELFQVep/VmHKrm7SQ4Mcy4OLAcUXioKlvTAVX"
    b"au26RJZQVsm5DZaM0HFISwvQMGaGSyFxJc35GlMTpJTZSbyQfq5O5/8BQUzwnt0O1kQAAAAASUVO"
    b"RK5CYII="
)
ICON_W = (
    b"iVBORw0KGgoAAAANSUhEUgAAACgAAAAoCAYAAACM/rhtAAABhWlDQ1BJQ0MgUHJvZmlsZQAAeJx9"
    b"kT1Iw0AcxV9TpSIVBwuKCGaoThZERQUXrUIRKoRaoVUHk+snNGlIUlwcBdeCgx+LVQcXZ10dXAVB"
    b"8APE0clJ0UVK/F9SaBHjwXE/3t173L0DhFqJqWbbKKBqlpGIRcVUelUMvCKAQfRiBlMyM/U5SYrD"
    b"c3zdw8fXuwjP8j735+jKZE0G+ETiWaYbFvEG8eSmpXPeJw6xgpwhPiceMeiCxI9cV1x+45x3WOCZ"
    b"ISOZmCcOEYv5FlZamBUMlXiCOJxRNcoXUi5nOG9xVksV1rgnf2Ewq60sc53mAGJYxBIkiFBQQREl"
    b"WIjQqpFiIkH7UQ9/v+OXyKWQqwhGjgWUoUJ2/OB/8LtbMzc+5iYFo0D7i21/DAGBXaBete3vY9uu"
    b"nwD+Z+BKa/rLNWD6k/RqUwsfAd3bwMV1U1P2gMsdoO9Jlw3Zkfw0hVwOeD+jb0oDPbdA55rbW2Mf"
    b"pw9AkrqK3wAHh8BwnrLXPd7d0drbv2ca/f0AJHNy7tfsbkMAAAbDSURBVHiczZhpbBZVFIafFgRC"
    b"sVKtYBTEFXCvYjSyKHUBV9yiBhKXuMQlajCucd//GP2hUeMSF0SJkrjhAhqNilaUraDRui9FowJW"
    b"lBYqtK8/3jN+0+l8/b6qPzzJZGbu3Ln3nbO950yFJP7PUvkfrTMQqAEq/gWOcUC/vAf/hYwAjqY4"
    b"wLzxZKwGeAR4FdglO6lv6vpsoBHYHXisF+D2BQYBNwMfA5OAubHxAGCrIusJOBR4CtgMa+9YYFnX"
    b"WVJyDJb0o6RWST9LOkNSTep5cvSVtK2kEyVVS5orab6kdlnaJH0r6aO4v0nSnpI2kVQhaZCkPpKu"
    b"kNQhaYmkWklXS7oru19FJkjeB94ClgBnAdXAA8BLwOqYcxmwCXALsC60V0ragQeBFcCw0Opk4A7g"
    b"1pjzMPBdrJurQSTNknRUXFdKGidppqRlkk6RdGl89T+Vt0KzTbE2kqpCow2SpmQ1mAV4sKQ3M2MD"
    b"JE2T1BKLPP8PwS2VtELSh7K5h0m6IfYYIekHSduUAoikzyUNz4zVSjpT9s3Vkl7sJbhfJX0sqVHS"
    b"obJfPiJpjOyf+0laKMdBFzx5aeZx4Kq4HgxsGedK4DZgMbAnsBxHYjnSDxgN/BzrnwT0AY6LdUYD"
    b"G+LoIn2zA8As4BNgNvAVcESMbwVMAL4B6gJwZ2xUSqriPCnOWwDrcUAC7A98Wi7AlQHsBeAgYDes"
    b"gUnA1kB9zKskPwEvAfYpAbg/MDJAjQTG4mT9ZzkA1wOv4HSyFNgLeB2opTzmWVvGnATkQzi17YQt"
    b"003yNtyAmaADa3M0sKZMcADNqetVcW7HH56Wvpi1vo61V5YLEGymxVhrY7BpExEFU6zIeXdp6npx"
    b"nFtwcs+TM4BvcQCVDbAFc2QncAkFJwf73UbMLNsA72TeXRTnrym40HcUD6ZRWNMtvQEIsAB4j+5f"
    b"3onLq7YAuRb4MfW8Ic7zsLZn4ChdC/xRZK/f4+gVwItxaslKG/B9XK+JjW8HfoqxDcAb+OOaYn4L"
    b"zgoDi+zVSrGcmsMkyXGhpI1FmGFZsMBUSa9I2l5SnczVSNonxqokrZIptFLS6TlrdSqnilEPVJcc"
    b"YyX9kbNgq6SJqXnbBXUlBUZ2nYmSdgvw0yRdk7Pe5GI4ejJxQ5gwK804JdyJA+RMYCYOiM6c+VMw"
    b"vS0EzqV7edaM/TVXSuW2q3PGfsD+uRwn2SOAaTiis3Ix8CVOPR1x/JqZc1X2pd4AnEEhKhMZhbWx"
    b"HufDu4HPgRPoTn0HY95uwsz0HDA19fxe4PmeAGQr6jzZGifuoXG/MUDtgBki2bwJc3dr6t0WzLcv"
    b"42g/FSd+gPuAy3GU/yuAAIcAT+MqJJGZWJMVwHxgItZQwqljgOGY12uwKUfE8yfjo0tKuQDBpdYl"
    b"2MRg7a3AhD8H9y/XAFfG82uxptMJeG9gcxxk1Tj3tWHWyQvI3GomTwbjBmk2rjyqgCHAXbjVBEdw"
    b"Xeqdr+I+ocI63IC9HXNX4nqwEzgGR/cC3PqWBXAKMB73rEuxjw2NBQfgfvh07EdgH2vCkQuwLS58"
    b"EzkPm7Uf8Et8QD3W8GM4wg/HPwBm4gIi18SH4JbwBexjtcDJcV6GKe0YTPAX4DbxCUxxFbgwGIaD"
    b"YHoAOhVH9DPYAs24lWjFpd3ZWJsN2HWmYvdpyALcPDTzIbAHsD2OxDk4QPbHee8d4Hhs9vG4WJgX"
    b"G/fBvnc9LjQOxC7ydGw+H/vbOOx/Q3CkD4rr5XE/AfgsT4OnhXaasPOCzTUB2BVX13XYBPsBbwJH"
    b"Yt/ZK7TXL0D/BHyGAyIphOvj3QWhjOHYhcbj/zMjsVvNBbpx8fmShsqNdLovvlzSjZJGSTpOUr2k"
    b"6ZKGSLpNbkuT3yJVkgZK6h/cXCnpMEkHSLoy5p0kaWcVWtqEiy+KvcfJ7Wg3JrkfV7YdqbFzgC8o"
    b"/P6YiOmuGTv7zhRK+43Yr9rCnJ1xrI7xFuw2r4U1+se787D/3gNch4NpCNC/FNUdBfyGo3YRzm3T"
    b"cRJuxCzTWGINcMTuADyKS/w18ZFjU3MSX7slPq4CqC0FcD123mexnz2DHX5YatOFZQBcg4vVSuAD"
    b"3Igtwr5dnZnbgbX+LtBeCmANDoI/sWkacRTPiueiK/f2JJU4776HORtchp1QZP46YFUpgLviKKzB"
    b"ZdI6nM+Sbm4lOX9Fi0h7nDtinfR40V94PQHcDhM9OD+uAnak8LsCXGbtXibA2VjbndivE5mDc26u"
    b"9FQsDKDQbG+KI/QcTEvpAqA+5r1fJtAKrLF0h9eHrpnjb+mJi9N/ApLFquneHr5N8aY8T0T39jMX"
    b"HMBfLYYwriZjNRoAAAAASUVORK5CYII="
)

if __name__ == '__main__':
    Application()
